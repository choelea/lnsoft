/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whjbsoft.www.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whjbsoft.www.form.KhtsForm;
import com.whjbsoft.www.po.Khts;
import com.whjbsoft.www.service.KhtsService;
import com.whjbsoft.www.servicei.KhtsServicei;
import com.whjbsoft.www.util.FormateDate;
import com.whjbsoft.www.util.Pageinfo;

/**
 * MyEclipse Struts Creation date: 01-12-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/khts" name="khtsForm" parameter="methos"
 *                scope="request" validate="true"
 * @struts.action-forward name="updatePage"
 *                        path="/jsp/student/kfzx/khts_update.jsp"
 * @struts.action-forward name="listPage" path="/jsp/student/kfzx/khts_list.jsp"
 * @struts.action-forward name="viewPage" path="/jsp/student/kfzx/khts_view.jsp"
 * @struts.action-forward name="getList" path="khts.do?method=getList"
 * @struts.action-forward name="addPage" path="/jsp/student/kfzx/khts_add.jsp"
 */
public class KhtsAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private KhtsService service;

	/**
	 * 
	 */
	public KhtsAction() {
		this.setService(new KhtsServicei());
	}

	public KhtsService getService() {
		return service;
	}

	public void setService(KhtsService service) {
		this.service = service;
	}

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward getList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			String page = request.getParameter("page");
			if (page == null || "".equals(page)) {
				page = "1";
			}
			Integer userPk = (Integer) request.getSession().getAttribute(
					"userPk");
			Integer userSyszzj = (Integer) request.getSession().getAttribute(
					"userSyszzj");
			String rmMsg = request.getParameter("rmMsg");
			if ("true".equals(rmMsg)) {
				request.getSession().removeAttribute("queryMsg");
				request.getSession().removeAttribute("fieldName");
				request.getSession().removeAttribute("fieldValue");
			}
			String con = (String) request.getSession().getAttribute("queryMsg");
			if (con != null) {
				String fieldValue = (String) request.getSession().getAttribute(
						"fieldValue");
				String fieldName = (String) request.getSession().getAttribute(
						"fieldName");
				KhtsForm khtsForm = (KhtsForm) form;
				khtsForm.setFieldName(fieldName);
				khtsForm.setFieldValue(fieldValue);
				Pageinfo pageinfo = this.getService().getPagedata(con,
						Integer.parseInt(page), userPk, userSyszzj,
						"%" + fieldValue + "%");
				request.setAttribute("pageinfo", pageinfo);
			} else {
				Pageinfo pageinfo = this.getService().getPagedata("",
						Integer.parseInt(page), userPk, userSyszzj);
				request.setAttribute("pageinfo", pageinfo);
			}
			this.saveToken(request);
			return mapping.findForward("listPage");
	}
	
	public ActionForward query(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			StringBuffer sb = new StringBuffer();
			String fieldName = request.getParameter("fieldName");
			String fieldValue = request.getParameter("fieldValue");
			if (fieldName != null && !"".equals(fieldName)
					&& fieldValue != null && !"".equals(fieldValue)) {
				sb.append(" and A.").append(fieldName).append(" like ?");
				request.getSession().setAttribute("fieldName", fieldName);
				request.getSession().setAttribute("fieldValue", fieldValue);
				request.getSession().setAttribute("queryMsg", sb.toString());
			} else {
				request.getSession().removeAttribute("queryMsg");
				request.getSession().removeAttribute("fieldName");
				request.getSession().removeAttribute("fieldValue");
			}
			return mapping.findForward("getList");
		}
	
	public ActionForward goAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			KhtsForm khtsForm = (KhtsForm) form;
			khtsForm.getVo().setTsbh(FormateDate.formate("TS"));
			khtsForm.getVo().setTsrq(FormateDate.formateTime());
			this.saveToken(request);
			return mapping.findForward("addPage");
		}

	public ActionForward saveObject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			if (isTokenValid(request)) {
				KhtsForm khtsForm = (KhtsForm) form;
				boolean flag = this.getService().save(khtsForm.getVo());
				request.setAttribute("msg", flag ? "添加投诉成功！" : "添加投诉失败！");
				this.resetToken(request);
			}
			return mapping.findForward("getList");
		}

	public ActionForward goUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			KhtsForm khtsForm = (KhtsForm) form;
			String pk = request.getParameter("pk");
			Khts khts = this.getService().getKhts(Integer.parseInt(pk));
			khtsForm.setVo(khts);
			this.saveToken(request);
			return mapping.findForward("updatePage");
		}
	
	public ActionForward updateObject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			if (isTokenValid(request)) {
				KhtsForm khtsForm = (KhtsForm) form;
				boolean flag = this.getService().update(khtsForm.getVo());
				request.setAttribute("msg", flag ? "修改投诉成功！" : "修改投诉失败！");
				this.resetToken(request);
			}
			return mapping.findForward("getList");
		}
	
	public ActionForward viewObject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			KhtsForm khtsForm = (KhtsForm) form;
			String pk = request.getParameter("pk");
			Khts khts = this.getService().getKhts(Integer.parseInt(pk));
			khtsForm.setVo(khts);
			return mapping.findForward("viewPage");
		}
	
	public ActionForward delObject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			if(this.isTokenValid(request)){
				String[] pk = request.getParameterValues("pk");
				boolean flag = this.getService().delete(pk);
				request.setAttribute("msg", flag?"删除投诉成功！":"删除投诉失败！");
				this.resetToken(request);
			}
			return mapping.findForward("getList");
		}
	
	public ActionForward goTssl(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			KhtsForm khtsForm = (KhtsForm) form;
			String pk = request.getParameter("pk");
			Khts khts = this.getService().getKhts(Integer.parseInt(pk));
			khts.setSlrq(FormateDate.formateTime());
			khtsForm.setVo(khts);
			this.saveToken(request);
			return mapping.findForward("tsslPage");
		}
	
	
	public ActionForward tsslObject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			if (isTokenValid(request)) {
				KhtsForm khtsForm = (KhtsForm) form;
				boolean flag = this.getService().update(khtsForm.getVo());
				request.setAttribute("msg", flag ? "受理成功！" : "受理失败！");
				this.resetToken(request);
			}
			return mapping.findForward("getList");
		}
	
}